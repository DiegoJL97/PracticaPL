
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practicapl;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\006\007\000\002\002\004\000\002\006" +
    "\007\000\002\007\006\000\002\010\004\000\002\010\002" +
    "\000\002\011\003\000\002\011\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\014\005\000\002\020\005\000\002\020\007\000\002\021" +
    "\003\000\002\021\005\000\002\022\003\000\002\022\003" +
    "\000\002\002\004\000\002\003\006\000\002\003\007\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\015\010\000\002\005\005\000\002\005\002\000\002\004" +
    "\005\000\002\004\007\000\002\016\012\000\002\013\004" +
    "\000\002\013\004\000\002\013\010\000\002\013\006\000" +
    "\002\013\007\000\002\013\012\000\002\040\003\000\002" +
    "\040\003\000\002\023\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\004\000\002\032\005\000\002\032\002\000\002\033" +
    "\003\000\002\033\005\000\002\024\004\000\002\034\005" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\010\006\011\004\001\002\000\004\007" +
    "\221\001\002\000\004\002\220\001\002\000\004\007\007" +
    "\001\002\000\004\012\010\001\002\000\014\013\ufffc\016" +
    "\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\014\013\013" +
    "\016\017\020\022\023\012\024\015\001\002\000\004\007" +
    "\213\001\002\000\004\002\uffff\001\002\000\016\013\ufffd" +
    "\014\ufffd\016\ufffd\020\ufffd\023\ufffd\024\ufffd\001\002\000" +
    "\004\007\055\001\002\000\016\013\ufff7\014\ufff7\016\ufff7" +
    "\020\ufff7\023\ufff7\024\ufff7\001\002\000\004\007\041\001" +
    "\002\000\016\013\ufff6\014\ufff6\016\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\001\002\000\016\013\ufff8\014\ufff8\016\ufff8\020" +
    "\ufff8\023\ufff8\024\ufff8\001\002\000\004\007\025\001\002" +
    "\000\016\013\ufff9\014\ufff9\016\ufff9\020\ufff9\023\ufff9\024" +
    "\ufff9\001\002\000\004\021\037\001\002\000\006\021\ufff2" +
    "\022\035\001\002\000\004\012\027\001\002\000\020\007" +
    "\025\013\ufff5\014\ufff5\016\ufff5\020\ufff5\023\ufff5\024\ufff5" +
    "\001\002\000\004\021\031\001\002\000\006\027\032\030" +
    "\034\001\002\000\006\012\ufff0\026\ufff0\001\002\000\004" +
    "\012\ufff3\001\002\000\006\012\uffef\026\uffef\001\002\000" +
    "\004\007\025\001\002\000\004\021\ufff1\001\002\000\006" +
    "\027\032\030\034\001\002\000\004\012\ufff4\001\002\000" +
    "\004\017\052\001\002\000\020\007\043\013\uffee\014\uffee" +
    "\016\uffee\020\uffee\023\uffee\024\uffee\001\002\000\004\017" +
    "\044\001\002\000\010\004\050\005\047\006\045\001\002" +
    "\000\050\012\uffe9\017\uffe9\022\uffe9\026\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\047\uffe9\052\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\004\012\051\001\002\000\050\012\uffeb" +
    "\017\uffeb\022\uffeb\026\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\047\uffeb\052\uffeb\056\uffeb\057\uffeb\001\002\000" +
    "\050\012\uffea\017\uffea\022\uffea\026\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\047\uffea\052\uffea\056\uffea\057\uffea" +
    "\001\002\000\020\007\uffec\013\uffec\014\uffec\016\uffec\020" +
    "\uffec\023\uffec\024\uffec\001\002\000\010\004\050\005\047" +
    "\006\045\001\002\000\004\012\054\001\002\000\020\007" +
    "\uffed\013\uffed\014\uffed\016\uffed\020\uffed\023\uffed\024\uffed" +
    "\001\002\000\006\021\uffe6\025\056\001\002\000\004\007" +
    "\025\001\002\000\004\021\060\001\002\000\006\027\032" +
    "\030\034\001\002\000\004\012\062\001\002\000\014\014" +
    "\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\014" +
    "\014\066\016\017\020\022\023\012\024\015\001\002\000" +
    "\004\012\065\001\002\000\016\013\uffe3\014\uffe3\016\uffe3" +
    "\020\uffe3\023\uffe3\024\uffe3\001\002\000\014\007\076\046" +
    "\073\051\067\053\070\055\071\001\002\000\016\004\050" +
    "\005\047\006\045\007\104\025\135\045\134\001\002\000" +
    "\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002" +
    "\000\004\007\164\001\002\000\016\007\076\015\162\046" +
    "\073\051\067\053\070\055\071\001\002\000\016\004\050" +
    "\005\047\006\045\007\104\025\135\045\134\001\002\000" +
    "\016\007\ufffb\015\ufffb\046\ufffb\051\ufffb\053\ufffb\055\ufffb" +
    "\001\002\000\004\012\132\001\002\000\010\012\uffcc\025" +
    "\122\031\uffd9\001\002\000\004\031\102\001\002\000\004" +
    "\012\101\001\002\000\016\007\uffe1\015\uffe1\046\uffe1\051" +
    "\uffe1\053\uffe1\055\uffe1\001\002\000\014\004\050\005\047" +
    "\006\045\007\104\025\105\001\002\000\050\012\uffd7\017" +
    "\uffd7\022\uffd7\026\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\047\uffd7\052\uffd7\056\uffd7\057\uffd7\001\002\000\052" +
    "\012\uffcc\017\uffcc\022\uffcc\025\122\026\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\047\uffcc\052\uffcc\056\uffcc\057" +
    "\uffcc\001\002\000\014\004\050\005\047\006\045\007\104" +
    "\025\105\001\002\000\016\012\uffda\032\114\033\112\034" +
    "\116\035\115\036\111\001\002\000\050\012\uffd0\017\uffd0" +
    "\022\uffd0\026\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\047\uffd0\052\uffd0\056\uffd0\057\uffd0\001\002\000\014\004" +
    "\050\005\047\006\045\007\104\025\105\001\002\000\014" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\025\uffd1\001\002\000" +
    "\014\004\uffd4\005\uffd4\006\uffd4\007\uffd4\025\uffd4\001\002" +
    "\000\014\004\uffd6\005\uffd6\006\uffd6\007\uffd6\025\uffd6\001" +
    "\002\000\014\004\uffd5\005\uffd5\006\uffd5\007\uffd5\025\uffd5" +
    "\001\002\000\014\004\uffd2\005\uffd2\006\uffd2\007\uffd2\025" +
    "\uffd2\001\002\000\014\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\025\uffd3\001\002\000\050\012\uffd8\017\uffd8\022\uffd8\026" +
    "\uffd8\032\114\033\112\034\116\035\115\036\111\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\047\uffd8\052" +
    "\uffd8\056\uffd8\057\uffd8\001\002\000\016\026\121\032\114" +
    "\033\112\034\116\035\115\036\111\001\002\000\050\012" +
    "\uffcf\017\uffcf\022\uffcf\026\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\047\uffcf\052\uffcf\056\uffcf\057\uffcf\001\002" +
    "\000\014\004\050\005\047\006\045\007\104\025\105\001" +
    "\002\000\050\012\uffce\017\uffce\022\uffce\026\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\047\uffce\052\uffce\056\uffce" +
    "\057\uffce\001\002\000\020\022\127\026\uffcb\032\114\033" +
    "\112\034\116\035\115\036\111\001\002\000\004\026\126" +
    "\001\002\000\050\012\uffcd\017\uffcd\022\uffcd\026\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\047\uffcd\052\uffcd\056" +
    "\uffcd\057\uffcd\001\002\000\014\004\050\005\047\006\045" +
    "\007\104\025\105\001\002\000\004\026\uffca\001\002\000" +
    "\004\012\uffc9\001\002\000\016\007\uffe2\015\uffe2\046\uffe2" +
    "\051\uffe2\053\uffe2\055\uffe2\001\002\000\014\012\uffc7\037" +
    "\uffc7\040\uffc7\047\uffc7\052\uffc7\001\002\000\016\004\050" +
    "\005\047\006\045\007\104\025\135\045\134\001\002\000" +
    "\014\004\050\005\047\006\045\007\104\025\105\001\002" +
    "\000\026\017\151\032\114\033\112\034\116\035\115\036" +
    "\111\041\155\042\152\043\154\044\150\001\002\000\010" +
    "\037\142\040\141\047\143\001\002\000\016\004\050\005" +
    "\047\006\045\007\104\025\135\045\134\001\002\000\016" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\025\uffc5\045\uffc5\001" +
    "\002\000\016\004\uffc6\005\uffc6\006\uffc6\007\uffc6\025\uffc6" +
    "\045\uffc6\001\002\000\014\014\ufffc\016\ufffc\020\ufffc\023" +
    "\ufffc\024\ufffc\001\002\000\004\050\145\001\002\000\014" +
    "\014\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000" +
    "\016\007\uffe0\015\uffe0\046\uffe0\051\uffe0\053\uffe0\055\uffe0" +
    "\001\002\000\014\012\uffc8\037\142\040\141\047\uffc8\052" +
    "\uffc8\001\002\000\014\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\025\uffbe\001\002\000\014\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\025\uffbd\001\002\000\014\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\025\uffc1\001\002\000\014\004\050\005\047\006" +
    "\045\007\104\025\105\001\002\000\014\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\025\uffbf\001\002\000\014\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\025\uffc0\001\002\000\026\012\uffc4" +
    "\032\114\033\112\034\116\035\115\036\111\037\uffc4\040" +
    "\uffc4\047\uffc4\052\uffc4\001\002\000\016\026\160\032\114" +
    "\033\112\034\116\035\115\036\111\001\002\000\040\012" +
    "\uffc3\017\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffc3\040\uffc3\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047" +
    "\uffc3\052\uffc3\001\002\000\014\012\uffc2\037\uffc2\040\uffc2" +
    "\047\uffc2\052\uffc2\001\002\000\026\007\ufffe\012\ufffe\013" +
    "\ufffe\015\ufffe\046\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\001\002\000\016\007\ufffa\015\ufffa\046\ufffa\051" +
    "\ufffa\053\ufffa\055\ufffa\001\002\000\004\031\165\001\002" +
    "\000\014\004\050\005\047\006\045\007\104\025\105\001" +
    "\002\000\020\032\114\033\112\034\116\035\115\036\111" +
    "\056\170\057\167\001\002\000\014\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\025\uffdb\001\002\000\014\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\025\uffdc\001\002\000\014\004\050\005" +
    "\047\006\045\007\104\025\105\001\002\000\016\032\114" +
    "\033\112\034\116\035\115\036\111\052\173\001\002\000" +
    "\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002" +
    "\000\016\007\uffdd\015\uffdd\046\uffdd\051\uffdd\053\uffdd\055" +
    "\uffdd\001\002\000\004\054\176\001\002\000\016\004\050" +
    "\005\047\006\045\007\104\025\135\045\134\001\002\000" +
    "\010\012\200\037\142\040\141\001\002\000\016\007\uffde" +
    "\015\uffde\046\uffde\051\uffde\053\uffde\055\uffde\001\002\000" +
    "\010\037\142\040\141\052\202\001\002\000\014\014\ufffc" +
    "\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\016\007" +
    "\uffdf\015\uffdf\046\uffdf\051\uffdf\053\uffdf\055\uffdf\001\002" +
    "\000\004\026\212\001\002\000\004\021\206\001\002\000" +
    "\006\027\032\030\034\001\002\000\006\012\210\026\uffe5" +
    "\001\002\000\004\007\025\001\002\000\004\026\uffe4\001" +
    "\002\000\006\012\uffe7\021\uffe7\001\002\000\006\012\uffe6" +
    "\025\056\001\002\000\004\012\215\001\002\000\014\014" +
    "\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\004" +
    "\012\217\001\002\000\016\013\uffe8\014\uffe8\016\uffe8\020" +
    "\uffe8\023\uffe8\024\uffe8\001\002\000\004\002\000\001\002" +
    "\000\004\012\222\001\002\000\014\014\ufffc\016\ufffc\020" +
    "\ufffc\023\ufffc\024\ufffc\001\002\000\004\013\224\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\006\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\010\001\001\000\014\002\020\012\013\014\022\015" +
    "\015\016\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\025\021\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\027\001\001\000\002\001\001\000\004\022\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\035\001\001\000\002\001\001\000\004\022" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\056\001\001" +
    "\000\006\004\203\021\204\001\001\000\002\001\001\000" +
    "\004\022\060\001\001\000\002\001\001\000\006\007\063" +
    "\010\062\001\001\000\014\002\020\012\013\014\022\015" +
    "\015\016\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\071\013\073\023\074\024\077\025\076\001" +
    "\001\000\014\017\106\026\135\030\102\034\200\036\132" +
    "\001\001\000\006\007\174\010\062\001\001\000\002\001" +
    "\001\000\012\013\162\023\074\024\077\025\076\001\001" +
    "\000\014\017\106\026\135\030\102\034\136\036\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\106\026\105\030\102\001\001\000\002" +
    "\001\001\000\004\032\122\001\001\000\010\017\106\026" +
    "\117\030\102\001\001\000\006\027\107\031\112\001\001" +
    "\000\002\001\001\000\010\017\106\026\116\030\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\107\031\112\001\001\000\006\027\107\031\112" +
    "\001\001\000\002\001\001\000\012\017\106\026\123\030" +
    "\102\033\124\001\001\000\002\001\001\000\006\027\107" +
    "\031\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\106\026\123\030\102\033\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\106\026\135\030\102\036\160\001\001" +
    "\000\010\017\106\026\156\030\102\001\001\000\010\027" +
    "\107\031\112\037\152\001\001\000\004\035\137\001\001" +
    "\000\014\017\106\026\135\030\102\034\146\036\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\143" +
    "\010\062\001\001\000\002\001\001\000\006\007\145\010" +
    "\062\001\001\000\002\001\001\000\004\035\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\106\026\155\030\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\107\031\112\001\001\000" +
    "\006\027\107\031\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\106\026\165\030\102\001\001\000\010" +
    "\027\107\031\112\040\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\106\026\171\030\102\001\001" +
    "\000\006\027\107\031\112\001\001\000\006\007\173\010" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\106\026\135\030\102\034\176\036\132\001\001\000" +
    "\004\035\137\001\001\000\002\001\001\000\004\035\137" +
    "\001\001\000\006\007\202\010\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\206" +
    "\001\001\000\002\001\001\000\006\004\210\021\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\213" +
    "\001\001\000\002\001\001\000\006\007\215\010\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\222\010\062\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ArrayList<String> constantes = new ArrayList();
	ArrayList<String> funciones = new ArrayList();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolon BLQ dot 
            {
              Object RESULT =null;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	for(int i=0; i<constantes.size();i++){
												 				System.out.println(constantes.get(i)); 
												 			} 
												 			System.out.println("");
												 			funciones.add(new String("void main (void)"+valorBLQ));
											  				for(int i=0; i<funciones.size();i++){
												 				System.out.println(funciones.get(i)); 
												 			} 
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit identifier semicolon DCLLIST dot 
            {
              Object RESULT =null;
		 	for(int i=0; i<constantes.size();i++){
												 				System.out.println(constantes.get(i)); 
												 			} 
												 			System.out.println("");
											  				for(int i=0; i<funciones.size();i++){
												 				System.out.println(funciones.get(i)); 
												 			} 
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;
		int valorSLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorSL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("{"+"\n"+valorSL+"\n"+"}"+"\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSENT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorSENT+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;
		int valorSLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorSL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSENT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorSL+"\n"+valorSENT+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFVAR 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 constantes.add(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFCTE 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 constantes.add(valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funciones.add(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funciones.add(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFVAR ::= var DEFVARLIST semicolon 
            {
              Object RESULT =null;
		int valorListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorList+" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFVARLIST ::= VARLIST colon TBAS 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valor+""+valort+" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFVARLIST ::= DEFVARLIST semicolon VARLIST colon TBAS 
            {
              Object RESULT =null;
		int valorListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorList+";"+valor+","+valort); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARLIST ::= identifier comma VARLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+" "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TBAS ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new String("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TBAS ::= REAL 
            {
              Object RESULT =null;
		 RESULT = new String("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFCTE ::= constant CTELIST 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("#define "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTELIST ::= identifier equal SIMPVALUE semicolon 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(id+" "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolon 
            {
              String RESULT =null;
		int valorcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valorc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorc+" "+id+" "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFPROC ::= procedure identifier FORMAL_PARAMLIST semicolon BLQ semicolon 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valorf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("void "+id+" "+valorf+" "+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= openParenthesis FORMAL_PARAM closeParenthesis 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+valor+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAMLIST ::= 
            {
              String RESULT =null;
		 RESULT = new String("(void)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST colon TBAS 
            {
              String RESULT =null;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valort+" "+valorv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAM ::= VARLIST colon TBAS semicolon FORMAL_PARAM 
            {
              String RESULT =null;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valort+" "+valorv+", "+fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFFUN ::= function identifier FORMAL_PARAMLIST colon TBAS semicolon BLQ semicolon 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String valorf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorv+" "+id+" "+valorf+" "+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		int valorASIGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorASIGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorASIG = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorASIG+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		int valorPROCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorPROCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorPROC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorPROC+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= ifConditional EXPCOND then BLQ elseConditional BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= whileLoop EXPCOND doFor BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= repeat BLQ until EXPCOND semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= forLoop identifier assig EXP INC EXP doFor BLQ 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorEXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorINCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorINCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorINC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("for("+id+"="+valorEXP1+";"+id+valorINC+valorEXP2+"+1;"+id+"="+id+"+1)"+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INC ::= to 
            {
              Object RESULT =null;
		 RESULT = new String("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INC ::= downto 
            {
              Object RESULT =null;
		 RESULT = new String(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIG ::= ID assig EXP 
            {
              Object RESULT =null;
		int valorIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorID+" = "+valorEXP); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP1+" "+valorOP+" "+valorEXP2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int valorFACTORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFACTORright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorFACTOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorFACTOR+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int valorOPARITleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorOPARITright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorOPARIT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorOPARIT+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= plus 
            {
              Object RESULT =null;
		 RESULT = new String("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= minus 
            {
              Object RESULT =null;
		 RESULT = new String("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= multiplication 
            {
              Object RESULT =null;
		 RESULT = new String("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= div 
            {
              Object RESULT =null;
		 RESULT = new String("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= mod 
            {
              Object RESULT =null;
		 RESULT = new String("%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSUB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+" "+valorSUB); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUBPARAMLIST ::= openParenthesis EXPLIST closeParenthesis 
            {
              Object RESULT =null;
		int valorELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+valorEL+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = new String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPLIST ::= EXP 
            {
              Object RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPLIST ::= EXP comma EXPLIST 
            {
              Object RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP+","+valorEL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSUB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+" "+valorSUB); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPLOG ::= and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTORCOND ::= not FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= lessEqual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= greaterEqual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMP ::= equal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
