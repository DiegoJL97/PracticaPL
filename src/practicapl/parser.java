
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practicapl;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\006\007\000\002\002\004\000\002\006" +
    "\007\000\002\007\006\000\002\010\004\000\002\010\002" +
    "\000\002\011\003\000\002\041\002\000\002\011\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\014\005\000\002\020\005\000\002\020" +
    "\007\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\002\004\000\002\003\006\000" +
    "\002\003\007\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\042\002\000\002\015\011\000\002\005" +
    "\005\000\002\005\002\000\002\004\005\000\002\004\007" +
    "\000\002\043\002\000\002\016\013\000\002\013\004\000" +
    "\002\013\004\000\002\044\002\000\002\013\011\000\002" +
    "\045\002\000\002\013\007\000\002\046\002\000\002\013" +
    "\010\000\002\047\002\000\002\013\013\000\002\040\003" +
    "\000\002\040\003\000\002\023\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\004\000\002\032\005\000\002\032\002\000" +
    "\002\033\003\000\002\033\005\000\002\024\004\000\002" +
    "\034\005\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\010\006\011\004\001\002\000\004\007" +
    "\230\001\002\000\004\002\227\001\002\000\004\007\007" +
    "\001\002\000\004\012\010\001\002\000\014\013\ufffc\016" +
    "\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\014\013\013" +
    "\016\017\020\023\023\012\024\015\001\002\000\004\007" +
    "\uffe7\001\002\000\004\002\uffff\001\002\000\016\013\ufffd" +
    "\014\ufffd\016\ufffd\020\ufffd\023\ufffd\024\ufffd\001\002\000" +
    "\004\007\uffe1\001\002\000\016\013\ufff6\014\ufff6\016\ufff6" +
    "\020\ufff6\023\ufff6\024\ufff6\001\002\000\004\007\041\001" +
    "\002\000\016\013\ufff5\014\ufff5\016\ufff5\020\ufff5\023\ufff5" +
    "\024\ufff5\001\002\000\016\013\ufff7\014\ufff7\016\ufff7\020" +
    "\ufff7\023\ufff7\024\ufff7\001\002\000\016\013\ufff8\014\ufff8" +
    "\016\ufff8\020\ufff8\023\ufff8\024\ufff8\001\002\000\004\007" +
    "\025\001\002\000\004\021\037\001\002\000\006\021\ufff1" +
    "\022\035\001\002\000\004\012\027\001\002\000\020\007" +
    "\025\013\ufff4\014\ufff4\016\ufff4\020\ufff4\023\ufff4\024\ufff4" +
    "\001\002\000\004\021\031\001\002\000\006\027\032\030" +
    "\034\001\002\000\006\012\uffef\026\uffef\001\002\000\004" +
    "\012\ufff2\001\002\000\006\012\uffee\026\uffee\001\002\000" +
    "\004\007\025\001\002\000\004\021\ufff0\001\002\000\006" +
    "\027\032\030\034\001\002\000\004\012\ufff3\001\002\000" +
    "\004\017\052\001\002\000\020\007\043\013\uffed\014\uffed" +
    "\016\uffed\020\uffed\023\uffed\024\uffed\001\002\000\004\017" +
    "\044\001\002\000\010\004\050\005\047\006\045\001\002" +
    "\000\050\012\uffe8\017\uffe8\022\uffe8\026\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\047\uffe8\052\uffe8\056\uffe8\057" +
    "\uffe8\001\002\000\004\012\051\001\002\000\050\012\uffea" +
    "\017\uffea\022\uffea\026\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\047\uffea\052\uffea\056\uffea\057\uffea\001\002\000" +
    "\050\012\uffe9\017\uffe9\022\uffe9\026\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\047\uffe9\052\uffe9\056\uffe9\057\uffe9" +
    "\001\002\000\020\007\uffeb\013\uffeb\014\uffeb\016\uffeb\020" +
    "\uffeb\023\uffeb\024\uffeb\001\002\000\010\004\050\005\047" +
    "\006\045\001\002\000\004\012\054\001\002\000\020\007" +
    "\uffec\013\uffec\014\uffec\016\uffec\020\uffec\023\uffec\024\uffec" +
    "\001\002\000\004\007\056\001\002\000\006\021\uffe4\025" +
    "\057\001\002\000\004\007\025\001\002\000\004\021\061" +
    "\001\002\000\006\027\032\030\034\001\002\000\004\012" +
    "\063\001\002\000\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc" +
    "\024\ufffc\001\002\000\014\014\067\016\017\020\023\023" +
    "\012\024\015\001\002\000\004\012\066\001\002\000\016" +
    "\013\uffe0\014\uffe0\016\uffe0\020\uffe0\023\uffe0\024\uffe0\001" +
    "\002\000\014\007\077\046\074\051\070\053\071\055\072" +
    "\001\002\000\016\004\uffdb\005\uffdb\006\uffdb\007\uffdb\025" +
    "\uffdb\045\uffdb\001\002\000\014\014\uffd9\016\uffd9\020\uffd9" +
    "\023\uffd9\024\uffd9\001\002\000\004\007\uffd7\001\002\000" +
    "\016\007\ufffa\015\164\046\ufffa\051\ufffa\053\ufffa\055\ufffa" +
    "\001\002\000\016\004\uffdd\005\uffdd\006\uffdd\007\uffdd\025" +
    "\uffdd\045\uffdd\001\002\000\016\007\ufffb\015\ufffb\046\ufffb" +
    "\051\ufffb\053\ufffb\055\ufffb\001\002\000\004\012\133\001" +
    "\002\000\010\012\uffc5\025\123\031\uffd2\001\002\000\004" +
    "\031\103\001\002\000\004\012\102\001\002\000\016\007" +
    "\uffde\015\uffde\046\uffde\051\uffde\053\uffde\055\uffde\001\002" +
    "\000\014\004\050\005\047\006\045\007\105\025\107\001" +
    "\002\000\050\012\uffd0\017\uffd0\022\uffd0\026\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\047\uffd0\052\uffd0\056\uffd0" +
    "\057\uffd0\001\002\000\052\012\uffc5\017\uffc5\022\uffc5\025" +
    "\123\026\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\047" +
    "\uffc5\052\uffc5\056\uffc5\057\uffc5\001\002\000\016\012\uffd3" +
    "\032\120\033\115\034\117\035\121\036\113\001\002\000" +
    "\014\004\050\005\047\006\045\007\105\025\107\001\002" +
    "\000\050\012\uffc9\017\uffc9\022\uffc9\026\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\047\uffc9\052\uffc9\056\uffc9\057" +
    "\uffc9\001\002\000\016\026\114\032\120\033\115\034\117" +
    "\035\121\036\113\001\002\000\014\004\050\005\047\006" +
    "\045\007\105\025\107\001\002\000\014\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\025\uffca\001\002\000\050\012\uffc8\017" +
    "\uffc8\022\uffc8\026\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\047\uffc8\052\uffc8\056\uffc8\057\uffc8\001\002\000\014" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\025\uffcd\001\002\000" +
    "\014\004\uffcf\005\uffcf\006\uffcf\007\uffcf\025\uffcf\001\002" +
    "\000\014\004\uffcc\005\uffcc\006\uffcc\007\uffcc\025\uffcc\001" +
    "\002\000\014\004\uffce\005\uffce\006\uffce\007\uffce\025\uffce" +
    "\001\002\000\014\004\uffcb\005\uffcb\006\uffcb\007\uffcb\025" +
    "\uffcb\001\002\000\050\012\uffd1\017\uffd1\022\uffd1\026\uffd1" +
    "\032\120\033\115\034\117\035\121\036\113\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\047\uffd1\052\uffd1" +
    "\056\uffd1\057\uffd1\001\002\000\014\004\050\005\047\006" +
    "\045\007\105\025\107\001\002\000\050\012\uffc7\017\uffc7" +
    "\022\uffc7\026\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\047\uffc7\052\uffc7\056\uffc7\057\uffc7\001\002\000\020\022" +
    "\130\026\uffc4\032\120\033\115\034\117\035\121\036\113" +
    "\001\002\000\004\026\127\001\002\000\050\012\uffc6\017" +
    "\uffc6\022\uffc6\026\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\047\uffc6\052\uffc6\056\uffc6\057\uffc6\001\002\000\014" +
    "\004\050\005\047\006\045\007\105\025\107\001\002\000" +
    "\004\026\uffc3\001\002\000\004\012\uffc2\001\002\000\016" +
    "\007\uffdf\015\uffdf\046\uffdf\051\uffdf\053\uffdf\055\uffdf\001" +
    "\002\000\016\004\050\005\047\006\045\007\105\025\137" +
    "\045\136\001\002\000\014\012\uffc0\037\uffc0\040\uffc0\047" +
    "\uffc0\052\uffc0\001\002\000\016\004\050\005\047\006\045" +
    "\007\105\025\137\045\136\001\002\000\014\004\050\005" +
    "\047\006\045\007\105\025\107\001\002\000\026\017\153" +
    "\032\120\033\115\034\117\035\121\036\113\041\157\042" +
    "\155\043\156\044\152\001\002\000\010\037\144\040\143" +
    "\047\145\001\002\000\016\004\050\005\047\006\045\007" +
    "\105\025\137\045\136\001\002\000\016\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\025\uffbe\045\uffbe\001\002\000\016\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\025\uffbf\045\uffbf\001\002" +
    "\000\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001" +
    "\002\000\004\050\147\001\002\000\014\014\ufffc\016\ufffc" +
    "\020\ufffc\023\ufffc\024\ufffc\001\002\000\016\007\uffdc\015" +
    "\uffdc\046\uffdc\051\uffdc\053\uffdc\055\uffdc\001\002\000\014" +
    "\012\uffc1\037\144\040\143\047\uffc1\052\uffc1\001\002\000" +
    "\014\004\uffb7\005\uffb7\006\uffb7\007\uffb7\025\uffb7\001\002" +
    "\000\014\004\uffb6\005\uffb6\006\uffb6\007\uffb6\025\uffb6\001" +
    "\002\000\014\004\050\005\047\006\045\007\105\025\107" +
    "\001\002\000\014\004\uffba\005\uffba\006\uffba\007\uffba\025" +
    "\uffba\001\002\000\014\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\025\uffb8\001\002\000\014\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\025\uffb9\001\002\000\026\012\uffbd\032\120\033\115" +
    "\034\117\035\121\036\113\037\uffbd\040\uffbd\047\uffbd\052" +
    "\uffbd\001\002\000\016\026\162\032\120\033\115\034\117" +
    "\035\121\036\113\001\002\000\040\012\uffbc\017\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffbc\040\uffbc" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\047\uffbc\052\uffbc\001" +
    "\002\000\014\012\uffbb\037\uffbb\040\uffbb\047\uffbb\052\uffbb" +
    "\001\002\000\026\007\ufffe\012\ufffe\013\ufffe\015\ufffe\046" +
    "\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\001\002" +
    "\000\014\007\077\046\074\051\070\053\071\055\072\001" +
    "\002\000\016\007\ufff9\015\ufff9\046\ufff9\051\ufff9\053\ufff9" +
    "\055\ufff9\001\002\000\004\007\170\001\002\000\004\031" +
    "\171\001\002\000\014\004\050\005\047\006\045\007\105" +
    "\025\107\001\002\000\020\032\120\033\115\034\117\035" +
    "\121\036\113\056\174\057\173\001\002\000\014\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\025\uffd4\001\002\000\014\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\025\uffd5\001\002\000\014" +
    "\004\050\005\047\006\045\007\105\025\107\001\002\000" +
    "\016\032\120\033\115\034\117\035\121\036\113\052\177" +
    "\001\002\000\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc\024" +
    "\ufffc\001\002\000\016\007\uffd6\015\uffd6\046\uffd6\051\uffd6" +
    "\053\uffd6\055\uffd6\001\002\000\014\014\ufffc\016\ufffc\020" +
    "\ufffc\023\ufffc\024\ufffc\001\002\000\004\054\203\001\002" +
    "\000\016\004\050\005\047\006\045\007\105\025\137\045" +
    "\136\001\002\000\010\012\205\037\144\040\143\001\002" +
    "\000\016\007\uffd8\015\uffd8\046\uffd8\051\uffd8\053\uffd8\055" +
    "\uffd8\001\002\000\016\004\050\005\047\006\045\007\105" +
    "\025\137\045\136\001\002\000\010\037\144\040\143\052" +
    "\210\001\002\000\014\014\ufffc\016\ufffc\020\ufffc\023\ufffc" +
    "\024\ufffc\001\002\000\016\007\uffda\015\uffda\046\uffda\051" +
    "\uffda\053\uffda\055\uffda\001\002\000\004\026\220\001\002" +
    "\000\004\021\214\001\002\000\006\027\032\030\034\001" +
    "\002\000\006\012\216\026\uffe3\001\002\000\004\007\025" +
    "\001\002\000\004\026\uffe2\001\002\000\006\012\uffe5\021" +
    "\uffe5\001\002\000\004\007\222\001\002\000\006\012\uffe4" +
    "\025\057\001\002\000\004\012\224\001\002\000\014\014" +
    "\ufffc\016\ufffc\020\ufffc\023\ufffc\024\ufffc\001\002\000\004" +
    "\012\226\001\002\000\016\013\uffe6\014\uffe6\016\uffe6\020" +
    "\uffe6\023\uffe6\024\uffe6\001\002\000\004\002\000\001\002" +
    "\000\004\012\231\001\002\000\014\014\ufffc\016\ufffc\020" +
    "\ufffc\023\ufffc\024\ufffc\001\002\000\004\013\233\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\006\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\010\001\001\000\014\002\020\012\013\014\021\015" +
    "\015\016\017\001\001\000\004\042\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\054\001\001\000" +
    "\002\001\001\000\004\003\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\025\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\027\001\001\000\002\001\001\000" +
    "\004\022\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\035\001\001\000\002\001" +
    "\001\000\004\022\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\057\001\001\000\006\004\211\021" +
    "\212\001\001\000\002\001\001\000\004\022\061\001\001" +
    "\000\002\001\001\000\006\007\064\010\063\001\001\000" +
    "\014\002\020\012\013\014\021\015\015\016\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\072\013" +
    "\074\023\075\024\100\025\077\001\001\000\004\045\205" +
    "\001\001\000\004\046\200\001\001\000\004\047\166\001" +
    "\001\000\004\041\164\001\001\000\004\044\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\107\026\105\030\103\001\001\000\002\001" +
    "\001\000\004\032\123\001\001\000\006\027\111\031\115" +
    "\001\001\000\010\017\107\026\110\030\103\001\001\000" +
    "\002\001\001\000\006\027\111\031\115\001\001\000\010" +
    "\017\107\026\121\030\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\111\031\115\001\001\000\012\017\107\026\124\030\103" +
    "\033\125\001\001\000\002\001\001\000\006\027\111\031" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\107\026\124\030\103\033\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\107" +
    "\026\137\030\103\034\140\036\134\001\001\000\002\001" +
    "\001\000\012\017\107\026\137\030\103\036\162\001\001" +
    "\000\010\017\107\026\160\030\103\001\001\000\010\027" +
    "\111\031\115\037\153\001\001\000\004\035\141\001\001" +
    "\000\014\017\107\026\137\030\103\034\150\036\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\145" +
    "\010\063\001\001\000\002\001\001\000\006\007\147\010" +
    "\063\001\001\000\002\001\001\000\004\035\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\107\026" +
    "\157\030\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\111\031\115\001\001\000" +
    "\006\027\111\031\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\165\023\075\024" +
    "\100\025\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\107\026\171\030\103\001" +
    "\001\000\010\027\111\031\115\040\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\107\026\175\030" +
    "\103\001\001\000\006\027\111\031\115\001\001\000\006" +
    "\007\177\010\063\001\001\000\002\001\001\000\006\007" +
    "\201\010\063\001\001\000\002\001\001\000\014\017\107" +
    "\026\137\030\103\034\203\036\134\001\001\000\004\035" +
    "\141\001\001\000\002\001\001\000\014\017\107\026\137" +
    "\030\103\034\206\036\134\001\001\000\004\035\141\001" +
    "\001\000\006\007\210\010\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\214\001" +
    "\001\000\002\001\001\000\006\004\216\021\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\222\001\001\000\002\001\001\000\006\007\224" +
    "\010\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\231\010\063" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ArrayList<String> constantes = new ArrayList();
	ArrayList<String> funciones = new ArrayList();
	boolean funcion = false;
	boolean procedimiento = false;
	boolean ultimaFuncion = false;
	private int tabulaciones = 1;
	boolean unaSentencia = true;
	
	private String calcularTabulaciones(){
		String r = "";
		for(int i=0; i<tabulaciones; i++){
			r = r+"\t";
		}
		return r;
	}
	
	private String calcularTabulacionesCorcheteFinal(){
		String r = "";
		for(int i=1; i<tabulaciones; i++){
			r = r+"\t";
		}
		return r;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolon BLQ dot 
            {
              Object RESULT =null;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	
												 			funciones.add(new String("void main (void)"+valorBLQ));
											  				EscribirFichero.escribir(constantes,funciones);
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= unit identifier semicolon DCLLIST dot 
            {
              Object RESULT =null;
		 
															EscribirFichero.escribir(constantes,funciones);
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;
		int valorDCLLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorDCLLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorDCLLIST = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorSLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorSLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorSL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	//if(funcion || procedimiento){
																RESULT = new String("{"+"\n"+valorDCLLIST+valorSL+"\n"+calcularTabulacionesCorcheteFinal()+"}"); 
															//} else {
															//	RESULT = new String("{"+"\n"+valorSL+"\n"+calcularTabulacionesCorcheteFinal()+"}"); 
															//}
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;
		int valorDCLLISTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorDCLLISTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorDCLLIST = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorDCLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorDCLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorDCL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorDCLLIST+""+calcularTabulaciones()+valorDCL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= 
            {
              Object RESULT =null;
		 RESULT = new String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSENT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(calcularTabulaciones()+valorSENT+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int valorSLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ultimaFuncion = true; unaSentencia = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST NT$0 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorSLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorSL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorSENTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSENTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSENT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			unaSentencia = true;
																									ultimaFuncion = false;
																			 						RESULT = new String(valorSL+"\n"+calcularTabulaciones()+valorSENT+""); 
																		  	 					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 constantes.add(valor); RESULT = new String("\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFPROC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funciones.add(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFFUN 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funciones.add(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFVAR ::= var DEFVARLIST semicolon 
            {
              Object RESULT =null;
		int valorListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorList+";"+"\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEFVARLIST ::= VARLIST colon TBAS 
            {
              Object RESULT =null;
		int valorVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorVAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorTBASleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorTBASright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorTBAS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorTBAS+" "+valorVAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFVARLIST ::= DEFVARLIST semicolon VARLIST colon TBAS 
            {
              Object RESULT =null;
		int valorDEFVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorDEFVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorDEFVAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorVARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorVARright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorVAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorTBASleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorTBASright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorTBAS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorDEFVAR+";"+"\n"+valorTBAS+" "+valorVAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARLIST ::= identifier comma VARLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+","+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TBAS ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new String("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TBAS ::= REAL 
            {
              Object RESULT =null;
		 RESULT = new String("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFCTE ::= constant CTELIST 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("#define "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CTELIST ::= identifier equal SIMPVALUE semicolon 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(id+" "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolon 
            {
              String RESULT =null;
		int valorcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valorc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorc+" "+id+" "+valor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Object RESULT =null;
 procedimiento=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFPROC ::= procedure NT$1 identifier FORMAL_PARAMLIST semicolon BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valorf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 procedimiento=false; RESULT = new String("void "+id+" "+valorf+" "+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAMLIST ::= openParenthesis FORMAL_PARAM closeParenthesis 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+valor+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= 
            {
              String RESULT =null;
		 RESULT = new String("(void)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAM ::= VARLIST colon TBAS 
            {
              String RESULT =null;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valort+" "+valorv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST colon TBAS semicolon FORMAL_PARAM 
            {
              String RESULT =null;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valortright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valort+" "+valorv+", "+fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$2 ::= 
            {
              Object RESULT =null;
 funcion = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFFUN ::= function NT$2 identifier FORMAL_PARAMLIST colon TBAS semicolon BLQ semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String valorf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 funcion = false; 
																																	 RESULT = new String(valorv+" "+id+" "+valorf+" "+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;
		int valorASIGleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorASIGright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorASIG = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorASIG+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;
		int valorPROCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorPROCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorPROC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(valorPROC+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
 tabulaciones++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= ifConditional NT$3 EXPCOND then BLQ elseConditional BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorEXPCONDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorEXPCONDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorEXPCOND = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorBLQ1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorBLQ1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorBLQ1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorBLQ2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorBLQ2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorBLQ2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tabulaciones--; RESULT = new String("if ("+valorEXPCOND+") "+valorBLQ1+" else"+valorBLQ2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$4 ::= 
            {
              Object RESULT =null;
 tabulaciones++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= whileLoop NT$4 EXPCOND doFor BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXPCONDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXPCONDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXPCOND = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tabulaciones--; RESULT = new String("while ("+valorEXPCOND+")"+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
 tabulaciones++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= repeat NT$5 BLQ until EXPCOND semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXPCONDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPCONDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorEXPCOND = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tabulaciones--; RESULT = new String("do "+valorBLQ+" until ("+valorEXPCOND+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =null;
 tabulaciones++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= forLoop NT$6 identifier assig EXP INC EXP doFor BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorEXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorINCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorINCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valorINC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorBLQleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorBLQright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorBLQ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tabulaciones--; RESULT = new String("for("+id+"="+valorEXP1+";"+id+valorINC+valorEXP2+"+1;"+id+"="+id+"+1)"+valorBLQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INC ::= to 
            {
              Object RESULT =null;
		 RESULT = new String("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INC ::= downto 
            {
              Object RESULT =null;
		 RESULT = new String(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG ::= ID assig EXP 
            {
              Object RESULT =null;
		int valorIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	if((funcion && ultimaFuncion) || (funcion && unaSentencia)){
												RESULT = new String("return "+valorEXP);
											} else {
												RESULT = new String(valorID+" = "+valorEXP);}		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP1+" "+valorOP+" "+valorEXP2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int valorFACTORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFACTORright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorFACTOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorFACTOR+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int valorOPARITleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorOPARITright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorOPARIT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorOPARIT+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPARIT ::= plus 
            {
              Object RESULT =null;
		 RESULT = new String("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPARIT ::= minus 
            {
              Object RESULT =null;
		 RESULT = new String("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPARIT ::= multiplication 
            {
              Object RESULT =null;
		 RESULT = new String("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARIT ::= div 
            {
              Object RESULT =null;
		 RESULT = new String("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPARIT ::= mod 
            {
              Object RESULT =null;
		 RESULT = new String("%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valor+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTOR ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSUB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+" "+valorSUB); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUBPARAMLIST ::= openParenthesis EXPLIST closeParenthesis 
            {
              Object RESULT =null;
		int valorELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+valorEL+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;
		 RESULT = new String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()),((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPLIST ::= EXP 
            {
              Object RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPLIST ::= EXP comma EXPLIST 
            {
              Object RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP+","+valorEL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorSUBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorSUBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorSUB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(id+" "+valorSUB); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;
		int valorE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorE1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorE2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorE2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorE2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorE1+" "+valorOP+" "+valorE2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;
		int valorFCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorFC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorFC+""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPLOG ::= or 
            {
              Object RESULT =null;
		 RESULT = new String("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPLOG ::= and 
            {
              Object RESULT =null;
		 RESULT = new String("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;
		int valorEXP1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorEXP1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorEXP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorEXP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorEXP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorEXP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(valorEXP1+" "+valorOP+" "+valorEXP2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTORCOND ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;
		int valorEXPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorEXPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorEXP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+valorEXP+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTORCOND ::= not FACTORCOND 
            {
              Object RESULT =null;
		int valorFCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorFCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valorFC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("!"+valorFC); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCOMP ::= less 
            {
              Object RESULT =null;
		 RESULT = new String("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPCOMP ::= greater 
            {
              Object RESULT =null;
		 RESULT = new String(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCOMP ::= lessEqual 
            {
              Object RESULT =null;
		 RESULT = new String("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= greaterEqual 
            {
              Object RESULT =null;
		 RESULT = new String(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= equal 
            {
              Object RESULT =null;
		 RESULT = new String("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
