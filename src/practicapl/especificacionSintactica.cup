package practicaspl;
import java_cup.runtime.*;

/* TERMINALES */

terminal 			 	identifier, numeric_integer_const, numeric_real_const, string_const;
terminal 				program, semicolon, dot, begin, end, constant, equal, var, colon;
terminal 				comma, procedure, function, openParenthesis, closeParenthesis;
terminal 				INTEGER, REAL, assig, plus, minus, multiplication, div, mod;

terminal 				or,and,greater,less,lessEqual,greaterEqual,not;
terminal				if,then,else,while,do,repeat,until,for,to,downto;

/* NO TERMINALES */

non terminal 			PRG;
non terminal            BLQ, DCLLIST, SENTLIST, DCL, SENT, DEFCTE, DEFVAR, DEFPROC, DEFFUN;
non terminal			CTELIST, SIMPVALUE, DEFVARLIST, VARLIST, TBAS, FORMAL_PARAMLIST, FORMAL_PARAM;
non terminal			ASIG, PROC_CALL, ID, EXP, OP, FACTOR, OPARIT, SUBPARAMLIST, EXPLIST;

non terminal 			EXPCOND,OPLOG,FACTORCOND,OPCOMP,INC;

precedence left identifier;
precedence left plus, minus, multiplication, div, mod, equal;
precedence left not,or,and,equal,greater,less,lessEqual,greaterEqual;
precedence left openParenthesis, closeParenthesis;
precedence left or,and;

/* GRAMATICA */

PRG::= program identifier semicolon BLQ dot;
BLQ::= DCLLIST begin SENTLIST end;
DCLLIST::= DCLLIST DCL | ;
SENTLIST::= SENT | SENTLIST SENT;

DCL::= DEFVAR | DEFCTE | DEFPROC | DEFFUN;
DEFVAR::= var DEFVARLIST semicolon;
DEFVARLIST::= VARLIST colon TBAS | DEFVARLIST semicolon VARLIST colon TBAS;
VARLIST::= identifier | identifier comma VARLIST;
TBAS::= INTEGER | REAL;
DEFCTE::= constant CTELIST;
CTELIST::= identifier equal SIMPVALUE semicolon | CTELIST identifier equal SIMPVALUE semicolon;
SIMPVALUE::= numeric_integer_const | numeric_real_const | string_const;
DEFPROC::= procedure identifier FORMAL_PARAMLIST semicolon BLQ semicolon;
FORMAL_PARAMLIST::= openParenthesis FORMAL_PARAM closeParenthesis | ;
FORMAL_PARAM::= VARLIST colon TBAS | VARLIST colon TBAS semicolon FORMAL_PARAM;
DEFFUN::= function identifier FORMAL_PARAMLIST colon TBAS semicolon BLQ semicolon;

SENT ::= ASIG semicolon | PROC_CALL semicolon | if EXPCOND then BLQ else BLQ | while EXPCOND do BLQ | repeat BLQ until EXPCOND semicolon | for identifier assig EXP INC EXP do BLQ;
INC ::= to | downto;
ASIG ::= ID assig EXP;
ID ::= identifier;
EXP ::= EXP OP EXP | FACTOR;
OP ::= OPARIT;
OPARIT ::= plus | minus | multiplication | div | mod;
FACTOR ::= SIMPVALUE | openParenthesis EXP closeParenthesis | identifier SUBPARAMLIST;
SUBPARAMLIST ::= openParenthesis EXPLIST closeParenthesis | ;
EXPLIST ::= EXP | EXP comma EXPLIST;
PROC_CALL ::= identifier SUBPARAMLIST;

/*SENTENCIAS DE CONTROL DE FLUJO*/
EXPCOND ::= EXPCOND OPLOG EXPCOND FACTORCOND;
OPLOG ::= or | and ;
FACTORCOND ::= EXP OPCOMP EXP | openParenthesis EXP closeParenthesis | not FACTORCOND;
OPCOMP ::= less | greater | lessEqual | greaterEqual | equal;
