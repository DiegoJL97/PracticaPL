package practicapl;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code 
{:
	ArrayList<String> constantes = new ArrayList();
	ArrayList<String> funciones = new ArrayList();
	boolean funcion = false;
	boolean procedimiento = false;
	boolean ultimaFuncion = false;
	private int tabulaciones = 1;
	boolean unaSentencia = true;
	boolean incrementoFor = true;
	
	private String calcularTabulaciones(){
		String r = "";
		for(int i=0; i<tabulaciones; i++){
			r = r+"\t";
		}
		return r;
	}
	
	private String calcularTabulacionesCorcheteFinal(){
		String r = "";
		for(int i=1; i<tabulaciones; i++){
			r = r+"\t";
		}
		return r;
	}
:}

/* TERMINALES */

terminal String 		numeric_real_const, numeric_integer_const, string_const;
terminal String		 	identifier;
terminal 				unit, program, semicolon, dot, begin, end, constant, equal, var, colon;
terminal 				comma, procedure, function, openParenthesis, closeParenthesis;
terminal 				INTEGER, REAL, assig, plus, minus, multiplication, div, mod;

terminal 				or,and,greater,less,lessEqual,greaterEqual,not;
terminal				ifConditional,then,elseConditional,whileLoop,doFor,repeat,until,forLoop,to,downto;

/* NO TERMINALES */

non terminal String 	DEFCTE, CTELIST, FORMAL_PARAM, FORMAL_PARAMLIST;
non terminal 			PRG;
non terminal            BLQ, DCLLIST, SENTLIST, DCL, SENT, DEFVAR, DEFPROC, DEFFUN;
non terminal			SIMPVALUE, DEFVARLIST, VARLIST, TBAS;
non terminal			ASIG, PROC_CALL, ID, EXP, OP, FACTOR, OPARIT, SUBPARAMLIST, EXPLIST;

non terminal 			EXPCOND, OPLOG, FACTORCOND, OPCOMP, INC;

precedence left identifier;
precedence left plus, minus, multiplication, div, mod, equal;
precedence left not,or,and,equal,greater,less,lessEqual,greaterEqual;
precedence left openParenthesis, closeParenthesis;
precedence left or,and;

/* GRAMATICA */

PRG::= 	program identifier semicolon BLQ:valorBLQ dot 	{: 	
												 			funciones.add(new String("void main (void)"+valorBLQ));
											  				EscribirFichero.escribir(constantes,funciones,null);
														:} 
		| unit identifier:id semicolon DCLLIST dot 		{: 
															String libreria = "// Libreria: "+id;
															EscribirFichero.escribir(constantes,funciones,libreria);
														:};
		
BLQ::= DCLLIST:valorDCLLIST begin SENTLIST:valorSL end {: RESULT = new String("{"+"\n"+valorDCLLIST+valorSL+"\n"+calcularTabulacionesCorcheteFinal()+"}"); :};

DCLLIST::= 	DCLLIST:valorDCLLIST DCL:valorDCL 	{: if(valorDCL.equals("")){
														RESULT = new String(valorDCLLIST+""+valorDCL); 
													} else {
														RESULT = new String(valorDCLLIST+""+calcularTabulaciones()+valorDCL); 
													}
												:} 
			| {: RESULT = new String(); :};

SENTLIST::= SENT:valorSENT {: RESULT = new String(calcularTabulaciones()+valorSENT+""); :} 
			| SENTLIST:valorSL {: ultimaFuncion = true; unaSentencia = false; :} SENT:valorSENT {:	unaSentencia = true;
																									ultimaFuncion = false;
																			 						RESULT = new String(valorSL+"\n"+calcularTabulaciones()+valorSENT+""); 
																		  	 					:};

DCL::= 	DEFVAR:valor {: RESULT = new String(valor+""); :} 
		| DEFCTE:valor {: constantes.add(valor); RESULT = new String(""); :}
		| DEFPROC:valor {: funciones.add(valor+""); RESULT = new String(""); :}
		| DEFFUN:valor {: funciones.add(valor+""); RESULT = new String(""); :};
		
DEFVAR::= var DEFVARLIST:valorList semicolon {: RESULT = new String(valorList+";"+"\n"); :};

DEFVARLIST::= 	VARLIST:valorVAR colon TBAS:valorTBAS {: RESULT = new String(valorTBAS+" "+valorVAR); :} 
				| DEFVARLIST:valorDEFVAR semicolon VARLIST:valorVAR colon TBAS:valorTBAS {: RESULT = new String(valorDEFVAR+";"+"\n"+valorTBAS+" "+valorVAR); :};
				
VARLIST::= 	identifier:id {: RESULT = new String(id); :}
			| identifier:id comma VARLIST:valor {: RESULT = new String(id+","+valor); :};
			
TBAS::= INTEGER {: RESULT = new String("int"); :}| REAL {: RESULT = new String("float"); :};

DEFCTE::= constant CTELIST:valor {: RESULT = new String("#define "+valor); :};

CTELIST::= 	identifier:id equal SIMPVALUE:valor semicolon {: RESULT = new String(id+" "+valor); :} 
			| CTELIST:valorc identifier:id equal SIMPVALUE:valor semicolon {: RESULT = new String(valorc+" "+id+" "+valor); :};
			
SIMPVALUE::= 	numeric_integer_const:i {: RESULT = i; :}
				| numeric_real_const:r {: RESULT = r; :}
				| string_const:st {: RESULT = st; :};
				
DEFPROC::= procedure {: procedimiento=true; :} identifier:id FORMAL_PARAMLIST:valorf semicolon BLQ:valorBLQ semicolon {: procedimiento=false; RESULT = new String("void "+id+" "+valorf+" "+valorBLQ); :};

FORMAL_PARAMLIST::= openParenthesis FORMAL_PARAM:valor closeParenthesis {: RESULT = new String("("+valor+")"); :} 
					| {: RESULT = new String("(void)"); :} ;
					
FORMAL_PARAM::= VARLIST:valorv colon TBAS:valort {: RESULT = new String(valort+" "+valorv); :}
				| VARLIST:valorv colon TBAS:valort semicolon FORMAL_PARAM:fp {: RESULT = new String(valort+" "+valorv+", "+fp); :};
				
DEFFUN::= function {: funcion = true; :} identifier:id FORMAL_PARAMLIST:valorf colon TBAS:valorv semicolon BLQ:valorBLQ semicolon {: funcion = false; 
																																	 RESULT = new String(valorv+" "+id+" "+valorf+" "+valorBLQ); :};

SENT ::= 	ASIG:valorASIG semicolon {: RESULT = new String(valorASIG+";"); :} 
			| PROC_CALL:valorPROC semicolon {: RESULT = new String(valorPROC+";"); :} 
			| ifConditional {: tabulaciones++; :} EXPCOND:valorEXPCOND then BLQ:valorBLQ1 elseConditional BLQ:valorBLQ2 {: tabulaciones--; RESULT = new String("if ("+valorEXPCOND+") "+valorBLQ1+" else"+valorBLQ2); :}
			| whileLoop {: tabulaciones++; :} EXPCOND:valorEXPCOND doFor BLQ:valorBLQ {: tabulaciones--; RESULT = new String("while ("+valorEXPCOND+")"+valorBLQ); :}
			| repeat {: tabulaciones++; :} BLQ:valorBLQ until EXPCOND:valorEXPCOND semicolon {: tabulaciones--; RESULT = new String("do "+valorBLQ+" until ("+valorEXPCOND+")"); :}
			| forLoop {: tabulaciones++; :} identifier:id assig EXP:valorEXP1 INC:valorINC EXP:valorEXP2 doFor BLQ:valorBLQ {: tabulaciones--; 
																																if(incrementoFor){
																																	RESULT = new String("for("+id+"="+valorEXP1+";"+id+valorINC+valorEXP2+"+1;"+id+"="+id+"+1)"+valorBLQ);
																																} else {
																																	incrementoFor = true;
																																	RESULT = new String("for("+id+"="+valorEXP1+";"+id+valorINC+valorEXP2+"-1;"+id+"="+id+"-1)"+valorBLQ);
																																} 
																															:};
			
INC ::= to {: RESULT = new String("<"); :}
		| downto {: incrementoFor = false; RESULT = new String(">"); :};

ASIG ::= ID:valorID assig EXP:valorEXP {: 	if((funcion && ultimaFuncion) || (funcion && unaSentencia)){
												RESULT = new String("return "+valorEXP);
											} else {
												RESULT = new String(valorID+" = "+valorEXP);}		:};

ID ::= identifier:id {: RESULT = new String(id); :};

EXP ::= EXP:valorEXP1 OP:valorOP EXP:valorEXP2 {: RESULT = new String(valorEXP1+" "+valorOP+" "+valorEXP2); :} 
		| FACTOR:valorFACTOR {: RESULT = new String(valorFACTOR+""); :};
		
OP ::= OPARIT:valorOPARIT {: RESULT = new String(valorOPARIT+""); :};

OPARIT ::= 	plus {: RESULT = new String("+"); :}
			| minus {: RESULT = new String("-"); :}
			| multiplication {: RESULT = new String("*"); :}
			| div {: RESULT = new String("/"); :}
			| mod{: RESULT = new String("%"); :};
			
FACTOR ::= 	SIMPVALUE:valor {: RESULT = new String(valor+""); :} 
			| openParenthesis EXP closeParenthesis 
			| identifier:id SUBPARAMLIST:valorSUB {: RESULT = new String(id+" "+valorSUB); :};
			
SUBPARAMLIST ::= 	openParenthesis EXPLIST:valorEL closeParenthesis {: RESULT = new String("("+valorEL+")"); :} 
					| {: RESULT = new String(); :} ;
					
EXPLIST ::= EXP:valorEXP {: RESULT = new String(valorEXP+""); :} 
			| EXP:valorEXP comma EXPLIST:valorEL {: RESULT = new String(valorEXP+","+valorEL); :};
			
PROC_CALL ::= identifier:id SUBPARAMLIST:valorSUB {: RESULT = new String(id+" "+valorSUB); :};

/*SENTENCIAS DE CONTROL DE FLUJO*/

EXPCOND ::= EXPCOND:valorE1 OPLOG:valorOP EXPCOND:valorE2 {: RESULT = new String(valorE1+" "+valorOP+" "+valorE2); :}
			| FACTORCOND:valorFC {: RESULT = new String(valorFC+""); :};
			
OPLOG ::= 	or {: RESULT = new String("||"); :}
			| and {: RESULT = new String("&&"); :};

FACTORCOND ::= 	EXP:valorEXP1 OPCOMP:valorOP EXP:valorEXP2 {: RESULT = new String(valorEXP1+" "+valorOP+" "+valorEXP2); :} 
				| openParenthesis EXP:valorEXP closeParenthesis {: RESULT = new String("("+valorEXP+")"); :} 
				| not FACTORCOND:valorFC {: RESULT = new String("!"+valorFC); :};
				
OPCOMP ::= 	less {: RESULT = new String("<"); :} 
			| greater {: RESULT = new String(">"); :} 
			| lessEqual {: RESULT = new String("<="); :}
			| greaterEqual {: RESULT = new String(">="); :}
			| equal {: RESULT = new String("=="); :};
