
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 02 21:47:29 CEST 2019
//----------------------------------------------------

package practicaspl;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 02 21:47:29 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\007\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\005\000\002" +
    "\016\005\000\002\016\007\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\020\003\000\002\010\004" +
    "\000\002\014\006\000\002\014\007\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\012\010\000\002" +
    "\021\005\000\002\021\002\000\002\022\005\000\002\022" +
    "\007\000\002\013\012\000\002\007\004\000\002\007\004" +
    "\000\002\007\010\000\002\007\006\000\002\007\007\000" +
    "\002\007\012\000\002\040\003\000\002\040\003\000\002" +
    "\023\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\030\003\000\002\030\005\000\002\030\004\000\002" +
    "\032\005\000\002\032\002\000\002\033\003\000\002\033" +
    "\005\000\002\024\004\000\002\034\006\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\010\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\011\010\001\002\000\014\013\ufffd\015\ufffd\017" +
    "\ufffd\022\ufffd\023\ufffd\001\002\000\014\013\016\015\021" +
    "\017\025\022\014\023\017\001\002\000\004\012\013\001" +
    "\002\000\004\002\001\001\002\000\004\004\213\001\002" +
    "\000\014\013\ufffe\015\ufffe\017\ufffe\022\ufffe\023\ufffe\001" +
    "\002\000\014\004\105\045\076\050\100\052\077\054\103" +
    "\001\002\000\004\004\057\001\002\000\014\013\ufff8\015" +
    "\ufff8\017\ufff8\022\ufff8\023\ufff8\001\002\000\004\004\043" +
    "\001\002\000\014\013\ufff7\015\ufff7\017\ufff7\022\ufff7\023" +
    "\ufff7\001\002\000\014\013\ufff9\015\ufff9\017\ufff9\022\ufff9" +
    "\023\ufff9\001\002\000\014\013\ufffa\015\ufffa\017\ufffa\022" +
    "\ufffa\023\ufffa\001\002\000\004\004\027\001\002\000\004" +
    "\020\041\001\002\000\006\020\ufff3\021\037\001\002\000" +
    "\004\011\031\001\002\000\016\004\027\013\ufff6\015\ufff6" +
    "\017\ufff6\022\ufff6\023\ufff6\001\002\000\004\020\033\001" +
    "\002\000\006\026\034\027\036\001\002\000\006\011\ufff1" +
    "\025\ufff1\001\002\000\004\011\ufff4\001\002\000\006\011" +
    "\ufff0\025\ufff0\001\002\000\004\004\027\001\002\000\004" +
    "\020\ufff2\001\002\000\006\026\034\027\036\001\002\000" +
    "\004\011\ufff5\001\002\000\004\016\054\001\002\000\016" +
    "\004\045\013\uffef\015\uffef\017\uffef\022\uffef\023\uffef\001" +
    "\002\000\004\016\046\001\002\000\010\005\051\006\052" +
    "\007\047\001\002\000\064\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\011\uffea\016\uffea\021\uffea\024\uffea\025\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\046\uffea\051\uffea" +
    "\055\uffea\056\uffea\001\002\000\004\011\053\001\002\000" +
    "\064\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\016\uffec" +
    "\021\uffec\024\uffec\025\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\046\uffec\051\uffec\055\uffec\056\uffec\001" +
    "\002\000\064\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\016\uffeb\021\uffeb\024\uffeb\025\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\046\uffeb\051\uffeb\055\uffeb\056" +
    "\uffeb\001\002\000\016\004\uffed\013\uffed\015\uffed\017\uffed" +
    "\022\uffed\023\uffed\001\002\000\010\005\051\006\052\007" +
    "\047\001\002\000\004\011\056\001\002\000\016\004\uffee" +
    "\013\uffee\015\uffee\017\uffee\022\uffee\023\uffee\001\002\000" +
    "\006\020\uffe7\024\060\001\002\000\004\004\027\001\002" +
    "\000\004\020\062\001\002\000\006\026\034\027\036\001" +
    "\002\000\004\011\064\001\002\000\014\013\ufffd\015\ufffd" +
    "\017\ufffd\022\ufffd\023\ufffd\001\002\000\004\011\066\001" +
    "\002\000\014\013\uffe4\015\uffe4\017\uffe4\022\uffe4\023\uffe4" +
    "\001\002\000\004\025\075\001\002\000\004\020\071\001" +
    "\002\000\006\026\034\027\036\001\002\000\006\011\073" +
    "\025\uffe6\001\002\000\004\004\027\001\002\000\004\025" +
    "\uffe5\001\002\000\006\011\uffe8\020\uffe8\001\002\000\002" +
    "\001\002\000\014\013\ufffd\015\ufffd\017\ufffd\022\ufffd\023" +
    "\ufffd\001\002\000\002\001\002\000\016\004\105\014\153" +
    "\045\076\050\100\052\077\054\103\001\002\000\016\004" +
    "\ufffc\014\ufffc\045\ufffc\050\ufffc\052\ufffc\054\ufffc\001\002" +
    "\000\004\004\142\001\002\000\004\011\141\001\002\000" +
    "\010\011\uffcd\024\131\030\uffda\001\002\000\004\030\111" +
    "\001\002\000\004\011\110\001\002\000\016\004\uffe2\014" +
    "\uffe2\045\uffe2\050\uffe2\052\uffe2\054\uffe2\001\002\000\014" +
    "\004\113\005\051\006\052\007\047\024\114\001\002\000" +
    "\064\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\016\uffd8" +
    "\021\uffd8\024\uffd8\025\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\046\uffd8\051\uffd8\055\uffd8\056\uffd8\001" +
    "\002\000\064\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\016\uffcd\021\uffcd\024\131\025\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\046\uffcd\051\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\014\004\113\005\051\006\052\007\047" +
    "\024\114\001\002\000\016\011\uffdb\031\124\032\121\033" +
    "\123\034\125\035\120\001\002\000\064\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\016\uffd1\021\uffd1\024\uffd1\025" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046" +
    "\uffd1\051\uffd1\055\uffd1\056\uffd1\001\002\000\014\004\113" +
    "\005\051\006\052\007\047\024\114\001\002\000\014\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\024\uffd2\001\002\000\014" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\024\uffd5\001\002\000" +
    "\014\004\uffd7\005\uffd7\006\uffd7\007\uffd7\024\uffd7\001\002" +
    "\000\014\004\uffd4\005\uffd4\006\uffd4\007\uffd4\024\uffd4\001" +
    "\002\000\014\004\uffd6\005\uffd6\006\uffd6\007\uffd6\024\uffd6" +
    "\001\002\000\014\004\uffd3\005\uffd3\006\uffd3\007\uffd3\024" +
    "\uffd3\001\002\000\064\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\016\uffd9\021\uffd9\024\uffd9\025\uffd9\031\124\032" +
    "\121\033\123\034\125\035\120\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\051\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\016\025\130\031\124\032\121" +
    "\033\123\034\125\035\120\001\002\000\064\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0\021\uffd0\024\uffd0" +
    "\025\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\046\uffd0\051\uffd0\055\uffd0\056\uffd0\001\002\000\014\004" +
    "\113\005\051\006\052\007\047\024\114\001\002\000\064" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf\021" +
    "\uffcf\024\uffcf\025\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\051\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\020\021\136\025\uffcc\031\124\032\121\033\123\034" +
    "\125\035\120\001\002\000\004\025\135\001\002\000\064" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\016\uffce\021" +
    "\uffce\024\uffce\025\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\046\uffce\051\uffce\055\uffce\056\uffce\001\002" +
    "\000\014\004\113\005\051\006\052\007\047\024\114\001" +
    "\002\000\004\025\uffcb\001\002\000\004\011\uffca\001\002" +
    "\000\016\004\uffe3\014\uffe3\045\uffe3\050\uffe3\052\uffe3\054" +
    "\uffe3\001\002\000\004\030\143\001\002\000\014\004\113" +
    "\005\051\006\052\007\047\024\114\001\002\000\020\031" +
    "\124\032\121\033\123\034\125\035\120\055\146\056\145" +
    "\001\002\000\014\004\uffdc\005\uffdc\006\uffdc\007\uffdc\024" +
    "\uffdc\001\002\000\014\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\024\uffdd\001\002\000\014\004\113\005\051\006\052\007" +
    "\047\024\114\001\002\000\016\031\124\032\121\033\123" +
    "\034\125\035\120\051\151\001\002\000\014\013\ufffd\015" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\001\002\000\016\004\uffde" +
    "\014\uffde\045\uffde\050\uffde\052\uffde\054\uffde\001\002\000" +
    "\026\004\uffff\011\uffff\012\uffff\014\uffff\045\uffff\047\uffff" +
    "\050\uffff\052\uffff\053\uffff\054\uffff\001\002\000\016\004" +
    "\ufffb\014\ufffb\045\ufffb\050\ufffb\052\ufffb\054\ufffb\001\002" +
    "\000\010\036\161\037\160\051\156\001\002\000\014\013" +
    "\ufffd\015\ufffd\017\ufffd\022\ufffd\023\ufffd\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\022\004" +
    "\113\005\051\006\052\007\047\024\166\036\161\037\160" +
    "\044\164\001\002\000\030\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\011\uffc9\024\uffc9\036\uffc9\037\uffc9\044\uffc9\046\uffc9" +
    "\051\uffc9\001\002\000\016\004\113\005\051\006\052\007" +
    "\047\024\166\044\164\001\002\000\026\016\172\031\124" +
    "\032\121\033\123\034\125\035\120\040\176\041\173\042" +
    "\175\043\171\001\002\000\014\004\113\005\051\006\052" +
    "\007\047\024\114\001\002\000\016\025\170\031\124\032" +
    "\121\033\123\034\125\035\120\001\002\000\054\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\011\uffc5\016\uffd0\024\uffc5\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffc5\037\uffc5" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffc5\046\uffc5\051" +
    "\uffc5\001\002\000\014\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\024\uffc0\001\002\000\014\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\024\uffbf\001\002\000\014\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\024\uffc3\001\002\000\014\004\113\005\051\006" +
    "\052\007\047\024\114\001\002\000\014\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\024\uffc1\001\002\000\014\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\024\uffc2\001\002\000\042\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\024\uffc6\031\124\032" +
    "\121\033\123\034\125\035\120\036\uffc6\037\uffc6\044\uffc6" +
    "\046\uffc6\051\uffc6\001\002\000\030\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\024\uffc4\036\uffc4\037\uffc4\044\uffc4" +
    "\046\uffc4\051\uffc4\001\002\000\016\004\uffe0\014\uffe0\045" +
    "\uffe0\050\uffe0\052\uffe0\054\uffe0\001\002\000\004\053\203" +
    "\001\002\000\002\001\002\000\010\011\205\036\161\037" +
    "\160\001\002\000\016\004\uffdf\014\uffdf\045\uffdf\050\uffdf" +
    "\052\uffdf\054\uffdf\001\002\000\010\036\161\037\160\046" +
    "\207\001\002\000\014\013\ufffd\015\ufffd\017\ufffd\022\ufffd" +
    "\023\ufffd\001\002\000\004\047\211\001\002\000\014\013" +
    "\ufffd\015\ufffd\017\ufffd\022\ufffd\023\ufffd\001\002\000\016" +
    "\004\uffe1\014\uffe1\045\uffe1\050\uffe1\052\uffe1\054\uffe1\001" +
    "\002\000\006\011\uffe7\024\060\001\002\000\004\011\215" +
    "\001\002\000\014\013\ufffd\015\ufffd\017\ufffd\022\ufffd\023" +
    "\ufffd\001\002\000\004\011\217\001\002\000\014\013\uffe9" +
    "\015\uffe9\017\uffe9\022\uffe9\023\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\014\006\014\010\022\011" +
    "\023\012\017\013\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\100\007\101\023\103\024\106\025\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\027\017\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\031\001\001\000\002" +
    "\001\001\000\004\020\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\037\001\001" +
    "\000\002\001\001\000\004\020\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\060\001\001\000\006\017\067\022\066" +
    "\001\001\000\002\001\001\000\004\020\062\001\001\000" +
    "\002\001\001\000\006\003\064\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\071\001\001\000\002\001\001\000\006" +
    "\017\067\022\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\205\001\001\000\006\003\201\004\010" +
    "\001\001\000\004\034\154\001\001\000\012\007\153\023" +
    "\103\024\106\025\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\115\026\114\030\111\001\001\000\002\001\001\000" +
    "\004\032\131\001\001\000\010\015\115\026\126\030\111" +
    "\001\001\000\006\027\116\031\121\001\001\000\002\001" +
    "\001\000\010\015\115\026\125\030\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\116" +
    "\031\121\001\001\000\006\027\116\031\121\001\001\000" +
    "\002\001\001\000\012\015\115\026\132\030\111\033\133" +
    "\001\001\000\002\001\001\000\006\027\116\031\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\115" +
    "\026\132\030\111\033\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\115\026\143\030\111\001\001\000\010\027\116\031" +
    "\121\040\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\115\026\147\030\111\001\001\000\006\027" +
    "\116\031\121\001\001\000\006\003\151\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\156\001\001\000\006\003\200\004\010\001\001" +
    "\000\004\034\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\115\026\164\030\111\035\156\036\162" +
    "\001\001\000\002\001\001\000\012\015\115\026\164\030" +
    "\111\036\177\001\001\000\010\027\116\031\121\037\173" +
    "\001\001\000\010\015\115\026\166\030\111\001\001\000" +
    "\006\027\116\031\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\115\026\176\030\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\116\031\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\203" +
    "\001\001\000\004\035\156\001\001\000\002\001\001\000" +
    "\004\035\156\001\001\000\006\003\207\004\010\001\001" +
    "\000\002\001\001\000\006\003\211\004\010\001\001\000" +
    "\002\001\001\000\004\021\213\001\001\000\002\001\001" +
    "\000\006\003\215\004\010\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= equal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= greaterEqual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= lessEqual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCOMP ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPCOMP ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= not FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTORCOND ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLOG ::= and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPLOG ::= or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPCOND ::= EXPCOND OPLOG EXPCOND FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPLIST ::= EXP comma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SUBPARAMLIST ::= openParenthesis EXPLIST closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= openParenthesis EXP closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPARIT ::= mod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPARIT ::= div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= multiplication 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPARIT ::= plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIG ::= ID assig EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INC ::= downto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INC ::= to 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= for identifier assig EXP INC EXP do BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= repeat BLQ until EXPCOND semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= while EXPCOND do BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= if EXPCOND then BLQ else BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= PROC_CALL semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT ::= ASIG semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFFUN ::= function identifier FORMAL_PARAMLIST colon TBAS semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAM ::= VARLIST colon TBAS semicolon FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMAL_PARAM ::= VARLIST colon TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAMLIST ::= openParenthesis FORMAL_PARAM closeParenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFPROC ::= procedure identifier FORMAL_PARAMLIST semicolon BLQ semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CTELIST ::= identifier equal SIMPVALUE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFCTE ::= constant CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TBAS ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TBAS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARLIST ::= identifier comma VARLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARLIST ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFVARLIST ::= DEFVARLIST semicolon VARLIST colon TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFVARLIST ::= VARLIST colon TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFVAR ::= var DEFVARLIST semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolon BLQ dot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

